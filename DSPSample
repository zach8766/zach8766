import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from scipy.fft import fft, fftfreq

fs = 1000  # Sampling frequency 
t = np.linspace(0, 1, fs, endpoint=False)  # Time vector for 1 second
f_clean = 5  # Frequency of the clean signal 5 Hz 
f_noise = 50  # Frequency of the noise signal 50 Hz

# Generate a clean sine wave (5 Hz)
clean_signal = np.sin(2 * np.pi * f_clean * t)

noise_level = 0.5
noise = noise_level * np.sin(2 * np.pi * f_noise * t) + 0.3 * np.random.randn(t.size)

# Noisy signal (clean + noise)
noisy_signal = clean_signal + noise

filter_type = 'bandpass'  
cutoff_low = 10  # Lower cutoff frequency for band-pass
cutoff_high = 40  # Upper cutoff frequency for band-pass

# IIR or FIR Filter Choice
filter_choice = 'FIR'  # Options: 'FIR' or 'IIR'

if filter_choice == 'FIR':
    numtaps = 101  # Filter length for FIR

    if filter_type == 'lowpass':
        fir_filter = signal.firwin(numtaps, cutoff_low, fs=fs)
    elif filter_type == 'highpass':
        fir_filter = signal.firwin(numtaps, cutoff_low, pass_zero=False, fs=fs)
    elif filter_type == 'bandpass':
        fir_filter = signal.firwin(numtaps, [cutoff_low, cutoff_high], pass_zero=False, fs=fs)
    elif filter_type == 'bandstop':
        fir_filter = signal.firwin(numtaps, [cutoff_low, cutoff_high], fs=fs)

    # Apply FIR filter
    filtered_signal = signal.lfilter(fir_filter, 1.0, noisy_signal)

elif filter_choice == 'IIR':
    if filter_type == 'lowpass':
        sos = signal.butter(10, cutoff_low, btype='lowpass', fs=fs, output='sos')
    elif filter_type == 'highpass':
        sos = signal.butter(10, cutoff_low, btype='highpass', fs=fs, output='sos')
    elif filter_type == 'bandpass':
        sos = signal.butter(10, [cutoff_low, cutoff_high], btype='bandpass', fs=fs, output='sos')
    elif filter_type == 'bandstop':
        sos = signal.butter(10, [cutoff_low, cutoff_high], btype='bandstop', fs=fs, output='sos')

    # Apply IIR filter
    filtered_signal = signal.sosfilt(sos, noisy_signal)

# FFT of the noisy and filtered signals
fft_noisy_signal = fft(noisy_signal)
fft_filtered_signal = fft(filtered_signal)
fft_freq = fftfreq(t.size, 1/fs)

# Frequency Response of the filter
if filter_choice == 'FIR':
    w, h = signal.freqz(fir_filter, fs=fs)
else:
    w, h = signal.sosfreqz(sos, fs=fs)

plt.figure(figsize=(14, 10))

# Plot original, noisy, and filtered signals
plt.subplot(4, 1, 1)
plt.plot(t, clean_signal, label="Clean Signal (5 Hz)")
plt.plot(t, noisy_signal, label="Noisy Signal", alpha=0.5)
plt.title("Clean vs Noisy Signal")
plt.xlabel("Time [seconds]")
plt.ylabel("Amplitude")
plt.legend()

plt.subplot(4, 1, 2)
plt.plot(t, filtered_signal, label=f"Filtered Signal ({filter_type})", color='green')
plt.title(f"Filtered Signal ({filter_type.capitalize()} at {cutoff_low} Hz, {cutoff_high} Hz)")
plt.xlabel("Time [seconds]")
plt.ylabel("Amplitude")
plt.legend()

# FFT of Noisy and Filtered Signals
plt.subplot(4, 1, 3)
plt.plot(fft_freq[:fs//2], np.abs(fft_noisy_signal[:fs//2]), label="Noisy Signal FFT")
plt.plot(fft_freq[:fs//2], np.abs(fft_filtered_signal[:fs//2]), label="Filtered Signal FFT", color='green')
plt.title("FFT of Noisy and Filtered Signals (Frequency Domain)")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Magnitude")
plt.legend()

# Frequency Response of the Filter
plt.subplot(4, 1, 4)
plt.plot(w, np.abs(h), label="Filter Frequency Response", color='blue')
plt.title(f"Frequency Response of {filter_choice} Filter ({filter_type.capitalize()})")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Gain")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()

